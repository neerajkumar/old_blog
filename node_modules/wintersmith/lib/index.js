// Generated by CoffeeScript 1.3.3
var ContentPlugin, ContentTree, TemplatePlugin, async, defaultOptions, defaultPlugins, extend, loadContents, loadPlugins, loadTemplates, logger, readJSON, registerContentPlugin, registerTemplatePlugin, renderer, rfc822, _ref, _ref1, _ref2;

async = require('async');

_ref = require('./common'), extend = _ref.extend, logger = _ref.logger, rfc822 = _ref.rfc822, readJSON = _ref.readJSON;

_ref1 = require('./content'), ContentTree = _ref1.ContentTree, ContentPlugin = _ref1.ContentPlugin, registerContentPlugin = _ref1.registerContentPlugin;

_ref2 = require('./templates'), TemplatePlugin = _ref2.TemplatePlugin, loadTemplates = _ref2.loadTemplates, registerTemplatePlugin = _ref2.registerTemplatePlugin;

renderer = require('./renderer');

defaultPlugins = {
  Page: require('./plugins/markdown-page'),
  MarkdownPage: require('./plugins/markdown-page'),
  JsonPage: require('./plugins/json-page'),
  JadeTemplate: require('./plugins/jade-template')
};

registerContentPlugin('pages', '**/*.*(markdown|md)', defaultPlugins.MarkdownPage);

registerContentPlugin('pages', '**/*.json', defaultPlugins.JsonPage);

registerTemplatePlugin('**/*.jade', defaultPlugins.JadeTemplate);

loadContents = function(location, callback) {
  /* traverse *location* and return a tree of contents
  */
  logger.verbose("loading contents in " + location);
  return ContentTree.fromDirectory(location, callback);
};

loadPlugins = function(plugins, callback) {
  if (plugins != null ? plugins.length : void 0) {
    require('coffee-script');
  }
  return async.forEach(plugins, function(pluginPath, callback) {
    var plugin;
    logger.verbose("loading plugin: " + pluginPath);
    try {
      plugin = require(pluginPath);
    } catch (error) {
      callback(error);
      return;
    }
    return plugin(module.exports, callback);
  }, callback);
};

defaultOptions = {
  plugins: [],
  ignore: [],
  locals: {}
};

module.exports = function(options, callback) {
  /* build all contents and templates
      *options*:
        contents: path to contents
        ignore: list of files/pattern in contents directory to ignore
        plugins: array of paths to plugins to load
        templates: path to templates
        output: path to output directory
        locals: optional extra data to send to templates
  */

  var contentOptions, key, _ref3;
  for (key in defaultOptions) {
    if ((_ref3 = options[key]) == null) {
      options[key] = defaultOptions[key];
    }
  }
  logger.verbose('running with options:', {
    options: options
  });
  contentOptions = {
    ignore: options.ignore
  };
  return async.waterfall([
    async.apply(loadPlugins, options.plugins), function(callback) {
      return async.parallel({
        contents: async.apply(ContentTree.fromDirectory, options.contents, contentOptions),
        templates: async.apply(loadTemplates, options.templates)
      }, callback);
    }, function(result, callback) {
      return renderer(result.contents, result.templates, options.output, options.locals, callback);
    }
  ], callback);
};

module.exports.renderer = renderer;

module.exports.loadTemplates = loadTemplates;

module.exports.loadContents = loadContents;

module.exports.loadPlugins = loadPlugins;

module.exports.ContentTree = ContentTree;

module.exports.ContentPlugin = ContentPlugin;

module.exports.TemplatePlugin = TemplatePlugin;

module.exports.defaultPlugins = defaultPlugins;

module.exports.registerContentPlugin = registerContentPlugin;

module.exports.registerTemplatePlugin = registerTemplatePlugin;

module.exports.extend = extend;

module.exports.rfc822 = rfc822;

module.exports.logger = logger;

module.exports.readJSON = readJSON;
